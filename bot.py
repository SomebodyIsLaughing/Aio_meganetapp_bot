from config import TOKEN
from aiogram import Bot, Dispatcher, executor, types
import keyboards as kb
import help as hp


bot = Bot(token=TOKEN)
dp = Dispatcher(bot)

# –ü–æ–º–æ—â—å
@dp.message_handler(commands=['start'])
async def process_help_command(message: types.Message):
    await message.reply(hp.start_message)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ - mysupport
@dp.message_handler(commands=['mysupport'])
async def process_command_1(message: types.Message):
    await message.reply("–í—Å–µ, —á—Ç–æ –∫–∞—Å–∞—Ç–µ—Ç—Å—è –æ–ø–µ—Ä–∞—Ü–∏–π —Å –∞–∫–∫–∞—É–Ω—Ç–æ–º, –æ–±—Ä–∞—â–µ–Ω–∏–π –≤ —Ç–µ—Ö. –ø–æ–¥–¥–µ—Ä–∂–∫—É –∏ –ø–æ–ª–µ–∑–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤", reply_markup=kb.inline_kb1)

# –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ ONTAP_basic
@dp.message_handler(commands=['ontap_basic'])
async def process_command_2(message: types.Message):
    await message.reply("–ë–∞–∑–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ ONTAP: –°–∫–∞—á–∞—Ç—å –ø—Ä–æ—à–∏–≤–∫—É, –æ–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ—à–∏–≤–∫—É, –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å Autosupport", reply_markup=kb.ontap_kb1)

# –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ ONTAP_special
@dp.message_handler(commands=['ontap_special'])
async def process_command_3(message: types.Message):
    await message.reply("üöÄ coming soon üöÄ", reply_markup=kb.spec_kb1)

# –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ e-series
@dp.message_handler(commands=['eseries'])
async def process_command_4(message: types.Message):
    await message.reply("–í—Å–µ, —á—Ç–æ –∫–∞—Å–∞—Ç–µ—Ç—Å—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è –ü–û Santricity", reply_markup=kb.eseris_kb1)

# –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ portfolio
@dp.message_handler(commands=['portfolio'])
async def process_command_5(message: types.Message):
    await message.reply("–ö–∞–∫–∏–µ –ø—Ä–æ–¥—É–∫—Ç—ã –µ—Å—Ç—å –≤ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ NetApp, —á—Ç–æ –æ–Ω–∏ –∏–∑ —Å–µ–±—è –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—é—Ç –∏ –∏—Ö —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏", reply_markup=kb.port_kb1)

# –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ design
@dp.message_handler(commands=['design'])
async def process_command_6(message: types.Message):
    await message.reply("üöÄ coming soon üöÄ", reply_markup=kb.design_kb1)


if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
